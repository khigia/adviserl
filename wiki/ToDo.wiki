#summary List of TODO (not features)
 * Deployment / build
     * OTP release (will run mnesia automatically)
     * ? sinan build system ... create dependancy with a repository?
     * ? CEAN packaging
     * look at some windows/mac build system (see with sinan)
 * Documentation
     * main doc not uptodate with current code (adv_source, adv_item, load/save...)
     * document scripts in bin folder
     * real documentation: install, user, and devel guides
     * examples / testing
         * API examples
         * example/API/plugin(?) to clean the ratings with a given timestamp too old (use example of rating data)
         * example of using MySQL and some reporting data (how to implement a realtime callback?)
         * example to use MySQL to implement a sources' service (an external user database)
 * API
     * is it a good idea to start mnesia as embeded application (using mnesia_sup)? goal is to be able to check the config, and decide where to start and stop it (currently, start is handle but stop is not possible)
     * adv_api is not consistent with adviserl ... need to be updated ... or just removed (replaced by simple rpc? ... not usable from python bridge!)
     * consistant backup of the whole system is tricky problem (need services synchronization)
     * need to support multiple predictors for the same set of data (multiple prediction callback module): this enable to have multiple prediction algorithms for the same set of data: this may require to have prediction plugins which are not gen_server but supervisor with one main prediction process and whatever else it need (or shall we only start_link processes inside a gen_server?) ...
     * if ratings need to be kept in memory for fast access, maybe the related data do not need to ... a new rating plugin could keep ratings scores in memory and rating data in another disc-based table (this also make data optional ... shall we remove rating data completely from API!?) ...
     * add some options to bin/adv-recommendall-source [-n api_node] [--sorted] [-n 5] 12 => print 2 numbers (itemID and score) by line
     * python interface to talk with adviserl_api (http://www.lysator.liu.se/~tab/erlang/py_interface)
 * Implementation / performance / algorithm
     * Bugs (to fix, not to do!)
         * adv_slone_smdod has a bug in prediction (the last column/row) can never be predicted; see source code for comment)
     * definitively lot of regression tests to write...
     * what about distributed collaborative filtering?
     * algorithm parallelism:
         * if prediction is a matrix base operation ... can be distributed (at least by group of lines)
         * building the matrix (init) can also be parallel
     * need more than recommend_all (recommend_one, recommend_n, recommend_best_effort(timeout), ...)
     * implementation of adviserl:update_rating is not optimal: it undo all items for one user, then redo with the new value; it could only change what is relative to the updated item.
