@title Adviserl
@version 0.2
@copyright 2007 Affle Pvt. Ltd.
@author Ludovic Coquelle <lcoquelle@gmail.com>

@doc
== Introduction ==

Adviserl is a recommender system.
It has been designed at the beginning to implement the Slope One algorithm but should support different algorithms.
Aim of the project is to provide necessary services to allow implementation of collaborative-filtering recommendations but also content-based recommendations.

=== What it does ===

Adviserl application provides a single interface {@link adviserl} (the same interface is accessible through a gen_server {@link adv_api} or HTTP server {@link adv_inets}).
This interface allow to rate item ({@link adviserl:rate/3}) and to get recommendation ({@link adviserl:recommend_all/2}).

Few naming conventions:
<ul>
    <li>a `source' designed the origin of a rating, usually a user;</li>
    <li>a `item' can be anything rated by a source;</li>
    <li>a `rating' is an integer `score' and any associated data (e.g. a timestamp);</li>
    <li>sources and items can be identified by `ID' (a positive integer used internally) or a `key' (any external representation).</li>
</ul>

Adviserl provides few public services:
<ul>
    <li>{@link adv_sources} keep a list of all possible rating sources (e.g. users): a source structure contains its ID, its key and an opaque data term (e.g. user login timestamp, user age etc).</li>
    <li>{@link adv_items} is the same kind of service (ID, key, opaque data) as the previous service but for items.</li>
    <li>{@link adv_ratings} store ratings information: one source (user) can rate any item by providing a integer rating value and any attached data (eg. timestamp...).</li>
    <li>{@link adv_predictions} store predictions data: when a new rating is available, or a rating is updated, predictions is updated as well to maintain some statistics or covisitation data (e.g. a slope-one is provided).</li>
</ul>

Even if those services are public, it is recommended to use the {@link adviserl} interface to coordinate actions (e.g. adding a rating should trigger the prediction service to update its data).

=== Running / API ===

Adviserl comes as an (hopefully standard) OTP application.

The public interface is defined by the {@link adviserl} exported functions.

Getting started:
```
% start application: by default use Slope-One structure and mnesia backend
application:start(sasl),
application:start(adviserl),

% add some rating in the system
adviserl:rate(user1, item2,  {3, no_rating_data}), % user1 rate item2 with score value 3
adviserl:rate(user1, item4,  {5, no_rating_data}), % ...
adviserl:rate(user2, item2,  {1, no_rating_data}),
adviserl:rate(user2, item5,  {8, no_rating_data}),
adviserl:rate(user3, item4,  {3, no_rating_data}),
adviserl:rate(user3, item5,  {2, no_rating_data}),
adviserl:rate(user3, item12, {2, no_rating_data}),

% some debug output to "see" the data
adv_ratings:print_debug(),
adv_predictions:print_debug(),

% try some predictions
adviserl:recommend_all(user1), % prediction for user 1
adviserl:recommend_all(user2), % ...
adviserl:recommend_all(user3), % ...
adviserl:recommend_all(user4), % unknown user => error
adviserl:recommend_all([]), % for any user without rating!
adviserl:recommend_all([{2,5}]), % for any user having those ratings (using item ID)
adviserl:recommend_all([{4,5}]), % ...
adviserl:recommend_all([{2,5},{4,5}]), % idem with multiple ratings
adviserl:recommend_all([{3,5}]), % ... even if item is unknown

% update on the fly
IncreaseRating = fun({R, Data}) -> {R + 1, Data} end,
DefaultRating = {1, no_data},
adviserl:rate(1, 2, {7, now()}), % change from 3 to 7, adding data
adviserl:rate(1, 2, IncreaseRating, DefaultRating), % update from 7 to 8
adviserl:rate(1, 42, IncreaseRating, DefaultRating), % rate item 42 at 1 (default)

bye.
'''


=== Building form sources ===

An ad-hoc (Linux) makefile is provided.

Main default target <em>all</em> build the application (target <em>build</em>) and generate this documentation (target <em>docs</em>).
<pre>
make
</pre>

A secondary target <em>dev</em> is provided to build the application with debug options, then run some tests (require eunit [http://freshmeat.net/projects/eunit], can be disable in Makefile configuration) and finally proceeds with some code checks (e.g. dialyzer).
<pre>
make dev
</pre>

As this 2 targets build the application with different configurations, you may want to clean all generated files with the target <em>clean</em>.
<pre>
make clean
</pre>

== Architecture ==

<div>
    <div>View of a running supervision tree</div>
    <div><img src="figure/suptree.png" /></div>
</div>
